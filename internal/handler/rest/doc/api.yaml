openapi: 3.0.3
info:
  title: Auth API
  description: Simple authentication API for login, logout and registration
  version: "1.0.0"

paths:
  /register:
    post:
      summary: "Register a new user"
      operationId: registerUser
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        "201":
          description: "User successfully registered"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "409":
          description: "User already exists (email/username conflict)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /login:
    post:
      summary: "Log in an existing user"
      operationId: loginUser
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        "200":
          description: "Login successful"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        "401":
          description: "Unauthorized (wrong credentials)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: "Bad Request (missing or invalid data)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /logout:
    post:
      summary: "Log out a user"
      operationId: logoutUser
      tags:
        - Auth
      # Можно требовать Bearer-токен для логаута
      security:
        - BearerAuth: []
      responses:
        "204":
          description: "Logout successful, no content returned"
        "401":
          description: "Unauthorized (invalid or expired token)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT  # или иной формат токена

  schemas:
    # ----- Registration -----
    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          example: "john_doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        password:
          type: string
          format: password
          example: "P@ssw0rd123"

    RegisterResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "c0a801e5-6f92-4c47-8a88-927128886c84"
        username:
          type: string
          example: "john_doe"
        email:
          type: string
          example: "john@example.com"
      description: "Basic info of newly created user"

    # ----- Login -----
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "john@example.com"
        password:
          type: string
          format: password
          example: "P@ssw0rd123"

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        token_type:
          type: string
          example: "Bearer"
        expires_in:
          type: integer
          example: 3600
      description: "JWT token (or another auth token) and its metadata"

    # ----- Errors -----
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Bad Request"
        message:
          type: string
          example: "Invalid email format"
      description: "Generic error format"
